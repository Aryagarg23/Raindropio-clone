name: Backend CI/CD Pipeline

on:
  push:
    branches: ['**']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: ['**']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt-dev

    - name: 🔧 Validate workflow YAML
      run: |
        echo "🔧 Validating workflow YAML syntax..."
        python -c "import yaml; yaml.safe_load(open('.github/workflows/backend-ci.yml')); print('✅ Workflow YAML is valid')"

    - name: 📦 Install Python dependencies
      run: |
        echo "📦 Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-xdist
        pip install flake8 black isort mypy bandit safety
        pip install --upgrade setuptools wheeles: ['**']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: ['**']
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt

    - name: 📦 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt-dev

    - name: � Validate workflow YAML
      run: |
        echo "🔧 Validating workflow YAML syntax..."
        python -c "import yaml; yaml.safe_load(open('.github/workflows/backend-ci.yml')); print('✅ Workflow YAML is valid')"

    - name: �📦 Install Python dependencies
      run: |
        echo "📦 Installing Python dependencies..."
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-html pytest-xdist
        pip install flake8 black isort mypy bandit safety
        pip install --upgrade setuptools wheel

    - name: 📦 Install development dependencies
      run: |
        pip install \
          flake8 \
          black \
          mypy \
          isort \
          bandit \
          safety \
          pytest-html \
          pytest-xdist

    - name: 🔍 Run security checks
      run: |
        echo "🔒 Running Bandit security linter..."
        bandit -r . -f json -o bandit-report.json || true
        echo "🛡️  Running Safety vulnerability check..."
        safety check --json > safety-report.json || true

    - name: 🎨 Check code formatting with Black
      run: |
        echo "🎨 Checking code formatting with Black..."
        black --check --diff --color --verbose . || (echo "❌ Code formatting issues found. Run 'black .' to fix." && exit 1)

    - name: 📋 Check import sorting with isort
      run: |
        echo "📋 Checking import sorting with isort..."
        isort --check-only --diff --color --verbose . || (echo "❌ Import sorting issues found. Run 'isort .' to fix." && exit 1)

    - name: 🐛 Run linting with Flake8
      run: |
        echo "🐛 Running Flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --verbose
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --verbose

    - name: 🔍 Run type checking with MyPy
      run: |
        echo "🔍 Running MyPy type checking..."
        mypy . --config-file mypy.ini --show-traceback || (echo "⚠️  MyPy found type issues. Consider fixing them for better code quality." && true)

    - name: 🧪 Run unit tests with maximum verbosity
      run: |
        echo "🧪 Running unit tests with maximum verbosity..."
        python -m pytest tests/unit/ \
          -v \
          --tb=long \
          --durations=10 \
          --strict-markers \
          --strict-config \
          --cov=. \
          --cov-report=term-missing \
          --cov-report=html:htmlcov \
          --cov-report=xml \
          --cov-fail-under=50 \
          --html=report.html \
          --self-contained-html

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: Backend Coverage
        fail_ci_if_error: false

    - name: 📁 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ github.run_id }}
        path: |
          backend/htmlcov/
          backend/report.html
          backend/bandit-report.json
          backend/safety-report.json
        retention-days: 30

    - name: 📋 Generate test summary
      if: always()
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -f report.html ]; then
          echo "✅ Test report generated: [report.html](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        fi

        if [ -d htmlcov ]; then
          echo "✅ Coverage report generated: [htmlcov/](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Code Quality Checks" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Black formatting check passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ isort import sorting check passed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Flake8 linting completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ MyPy type checking completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Bandit security scan completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Safety vulnerability check completed" >> $GITHUB_STEP_SUMMARY

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Branch Information" >> $GITHUB_STEP_SUMMARY
        echo "- Branch: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY